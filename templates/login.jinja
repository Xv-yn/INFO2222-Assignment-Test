<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
    <style>
        .login-page {
        width: 360px;
        padding: 8% 0 0;
        margin: auto;
        }
        .form {
        position: relative;
        z-index: 1;
        background: #FFFFFF;
        max-width: 360px;
        margin: 0 auto 100px;
        padding: 45px;
        text-align: center;
        box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
        }
        .form input {
        font-family: sans-serif;
        outline: 0;
        background: #f2f2f2;
        width: 100%;
        border: 0;
        margin: 0 0 15px;
        padding: 15px;
        box-sizing: border-box;
        font-size: 14px;
        }
        .form button {
        font-family: sans-serif;
        text-transform: uppercase;
        outline: 0;
        background: #4B6CB7;
        width: 100%;
        border: 0;
        padding: 15px;
        color: #FFFFFF;
        font-size: 14px;
        -webkit-transition: all 0.3 ease;
        transition: all 0.3 ease;
        cursor: pointer;
        }
        .form button:hover,.form button:active,.form button:focus {
        background: #182848;
        }

        body {
        background: #4B6CB7;
        background: rgb(75,108,183);
        background: linear-gradient(90deg, rgba(75,108,183,1) 0%, rgba(24,40,72,1) 50%);
        font-family: sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        }
    </style>

    <main>
        <div class="login-page">
            <div class="form">
                <h1>Log In</h1>
                <input id="username" type="text" placeholder="username"/>
                <input id="password" type="password" placeholder="password"/>
                <button onclick="login()">Login</button>
            </div>
        </div>
    </main>

    <script>

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_user') }}";

            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            let res = await axios.post(loginURL, {
                username: $("#username").val(),
                password: $("#password").val()
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            // redirects to the URL (ie. res.data),
            // we use _self here since we all hate that moment
            // when the browser opens a new tab
            window.open(res.data, "_self")
        }
    </script>
{% endblock %}
